{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://37.220.83.144:8080/';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // Добавляем withCredentials если API требует куки/сессии\n  // withCredentials: true\n});\n\n// Интерцептор для авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    console.error('API Error:', error.response.status, error.response.data);\n    // Можно добавить обработку конкретных статус кодов\n    if (error.response.status === 401) {\n      // Например, перенаправление на страницу входа\n      window.location.href = '/login';\n    }\n  } else if (error.request) {\n    console.error('API Error: No response received', error.request);\n  } else {\n    console.error('API Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Функция для преобразования данных формы в формат API\nconst transformQuizData = quizData => {\n  return {\n    title: quizData.quizTitle,\n    description: quizData.quizDescription,\n    questions: quizData.questions.map(question => ({\n      question: question.text,\n      type: question.type,\n      options: question.options,\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\n    }))\n  };\n};\nexport default {\n  // Работа с тестами\n  getQuizzes() {\n    return api.get('/Quizzes');\n  },\n  getQuiz(id) {\n    return api.get(`/Quizzes/${id}`);\n  },\n  createQuiz(quizData) {\n    const transformedData = transformQuizData(quizData);\n    return api.post('/Quizzes', transformedData);\n  },\n  updateQuiz(id, quizData) {\n    const transformedData = transformQuizData(quizData);\n    return api.put(`/Quizzes/${id}`, transformedData);\n  },\n  deleteQuiz(id) {\n    return api.delete(`/Quizzes/${id}`);\n  },\n  // Работа с вопросами\n  getQuestions(quizId) {\n    return api.get(`/Quizzes/${quizId}/questions`);\n  },\n  getQuestion(questionId) {\n    return api.get(`/Questions/${questionId}`);\n  },\n  createQuestion(quizId, questionData) {\n    return api.post(`/Quizzes/${quizId}/questions`, questionData);\n  },\n  updateQuestion(questionId, questionData) {\n    return api.put(`/Questions/${questionId}`, questionData);\n  },\n  deleteQuestion(questionId) {\n    return api.delete(`/Questions/${questionId}`);\n  },\n  // Работа с вариантами ответов\n  getOptions(questionId) {\n    return api.get(`/Questions/${questionId}/options`);\n  },\n  createOption(questionId, optionData) {\n    return api.post(`/Questions/${questionId}/options`, optionData);\n  },\n  updateOption(optionId, optionData) {\n    return api.put(`/Options/${optionId}`, optionData);\n  },\n  deleteOption(optionId) {\n    return api.delete(`/Options/${optionId}`);\n  },\n  // Работа с правильными ответами\n  getCorrectAnswers(questionId) {\n    return api.get(`/Questions/${questionId}/answers/correct`);\n  },\n  addCorrectAnswer(questionId, answerData) {\n    return api.post(`/Questions/${questionId}/answers/correct`, answerData);\n  },\n  deleteCorrectAnswer(answerId) {\n    return api.delete(`/Answers/correct/${answerId}`);\n  },\n  // Дополнительные методы для интеграции с ConfigUploadPage\n  saveQuizToServer(quizData) {\n    return this.createQuiz(quizData);\n  },\n  loadQuizFromServer(id) {\n    return this.getQuiz(id);\n  },\n  updateQuizOnServer(id, quizData) {\n    return this.updateQuiz(id, quizData);\n  },\n  deleteQuizFromServer(id) {\n    return this.deleteQuiz(id);\n  },\n  // Метод для загрузки YAML файла\n  uploadYamlFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/Quizzes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","console","status","data","window","location","href","message","Promise","reject","transformQuizData","quizData","title","quizTitle","description","quizDescription","questions","map","question","text","type","options","correct_option_index","correctOption","undefined","correct_option_indexes","correctOptions","getQuizzes","get","getQuiz","id","createQuiz","transformedData","post","updateQuiz","put","deleteQuiz","delete","getQuestions","quizId","getQuestion","questionId","createQuestion","questionData","updateQuestion","deleteQuestion","getOptions","createOption","optionData","updateOption","optionId","deleteOption","getCorrectAnswers","addCorrectAnswer","answerData","deleteCorrectAnswer","answerId","saveQuizToServer","loadQuizFromServer","updateQuizOnServer","deleteQuizFromServer","uploadYamlFile","file","formData","FormData","append"],"sources":["C:/Users/IP/Desktop/do_slez/sum25_swp/Antimoodlo-front/src/services/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://37.220.83.144:8080/';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Добавляем withCredentials если API требует куки/сессии\r\n  // withCredentials: true\r\n});\r\n\r\n// Интерцептор для авторизации\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Обработка ошибок\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      console.error('API Error:', error.response.status, error.response.data);\r\n      // Можно добавить обработку конкретных статус кодов\r\n      if (error.response.status === 401) {\r\n        // Например, перенаправление на страницу входа\r\n        window.location.href = '/login';\r\n      }\r\n    } else if (error.request) {\r\n      console.error('API Error: No response received', error.request);\r\n    } else {\r\n      console.error('API Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Функция для преобразования данных формы в формат API\r\nconst transformQuizData = (quizData) => {\r\n  return {\r\n    title: quizData.quizTitle,\r\n    description: quizData.quizDescription,\r\n    questions: quizData.questions.map(question => ({\r\n      question: question.text,\r\n      type: question.type,\r\n      options: question.options,\r\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\r\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\r\n    }))\r\n  };\r\n};\r\n\r\nexport default {\r\n  // Работа с тестами\r\n  getQuizzes() {\r\n    return api.get('/Quizzes');\r\n  },\r\n  \r\n  getQuiz(id) {\r\n    return api.get(`/Quizzes/${id}`);\r\n  },\r\n  \r\n  createQuiz(quizData) {\r\n    const transformedData = transformQuizData(quizData);\r\n    return api.post('/Quizzes', transformedData);\r\n  },\r\n  \r\n  updateQuiz(id, quizData) {\r\n    const transformedData = transformQuizData(quizData);\r\n    return api.put(`/Quizzes/${id}`, transformedData);\r\n  },\r\n  \r\n  deleteQuiz(id) {\r\n    return api.delete(`/Quizzes/${id}`);\r\n  },\r\n\r\n  // Работа с вопросами\r\n  getQuestions(quizId) {\r\n    return api.get(`/Quizzes/${quizId}/questions`);\r\n  },\r\n  \r\n  getQuestion(questionId) {\r\n    return api.get(`/Questions/${questionId}`);\r\n  },\r\n  \r\n  createQuestion(quizId, questionData) {\r\n    return api.post(`/Quizzes/${quizId}/questions`, questionData);\r\n  },\r\n  \r\n  updateQuestion(questionId, questionData) {\r\n    return api.put(`/Questions/${questionId}`, questionData);\r\n  },\r\n  \r\n  deleteQuestion(questionId) {\r\n    return api.delete(`/Questions/${questionId}`);\r\n  },\r\n\r\n  // Работа с вариантами ответов\r\n  getOptions(questionId) {\r\n    return api.get(`/Questions/${questionId}/options`);\r\n  },\r\n  \r\n  createOption(questionId, optionData) {\r\n    return api.post(`/Questions/${questionId}/options`, optionData);\r\n  },\r\n  \r\n  updateOption(optionId, optionData) {\r\n    return api.put(`/Options/${optionId}`, optionData);\r\n  },\r\n  \r\n  deleteOption(optionId) {\r\n    return api.delete(`/Options/${optionId}`);\r\n  },\r\n\r\n  // Работа с правильными ответами\r\n  getCorrectAnswers(questionId) {\r\n    return api.get(`/Questions/${questionId}/answers/correct`);\r\n  },\r\n  \r\n  addCorrectAnswer(questionId, answerData) {\r\n    return api.post(`/Questions/${questionId}/answers/correct`, answerData);\r\n  },\r\n  \r\n  deleteCorrectAnswer(answerId) {\r\n    return api.delete(`/Answers/correct/${answerId}`);\r\n  },\r\n\r\n  // Дополнительные методы для интеграции с ConfigUploadPage\r\n  saveQuizToServer(quizData) {\r\n    return this.createQuiz(quizData);\r\n  },\r\n  \r\n  loadQuizFromServer(id) {\r\n    return this.getQuiz(id);\r\n  },\r\n  \r\n  updateQuizOnServer(id, quizData) {\r\n    return this.updateQuiz(id, quizData);\r\n  },\r\n  \r\n  deleteQuizFromServer(id) {\r\n    return this.deleteQuiz(id);\r\n  },\r\n  \r\n  // Метод для загрузки YAML файла\r\n  uploadYamlFile(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    return api.post('/Quizzes/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}