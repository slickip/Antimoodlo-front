{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // Добавляем withCredentials если API требует куки/сессии\n  // withCredentials: true\n});\n\n// Интерцептор для авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    console.error('API Error:', error.response.status, error.response.data);\n    // Можно добавить обработку конкретных статус кодов\n    if (error.response.status === 401) {\n      // Например, перенаправление на страницу входа\n      window.location.href = '/login';\n    }\n  } else if (error.request) {\n    console.error('API Error: No response received', error.request);\n  } else {\n    console.error('API Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Функция для преобразования данных формы в формат API\nconst transformQuizData = quizData => {\n  return {\n    title: quizData.quizTitle,\n    description: quizData.quizDescription,\n    questions: quizData.questions.map(question => ({\n      question: question.text,\n      type: question.type,\n      options: question.options,\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\n    }))\n  };\n};\nexport default {\n  // Работа с тестами\n  getQuizzes() {\n    return api.get('/quizzes');\n  },\n  getQuiz(id) {\n    return api.get(`/quizzes/${id}`);\n  },\n  createQuiz(quizData) {\n    const payload = {\n      title: quizData.quizTitle,\n      course_id: 1,\n      duration: 30,\n      max_grade: 100,\n      start_date: new Date().toISOString(),\n      end_date: new Date().toISOString(),\n      state_id: 1,\n      submited_date: new Date().toISOString()\n    };\n    return api.post('/quizzes', payload);\n  },\n  updateQuiz(id, quizData) {\n    const transformedData = transformQuizData(quizData);\n    return api.put(`/quizzes/${id}`, transformedData);\n  },\n  deleteQuiz(id) {\n    return api.delete(`/quizzes/${id}`);\n  },\n  // Работа с вопросами\n  getQuestions(quizId) {\n    return api.get(`/quizzes/${quizId}/questions`);\n  },\n  getQuestion(questionId) {\n    return api.get(`/questions/${questionId}`);\n  },\n  createQuestion(quizId, questionData) {\n    return api.post(`/quizzes/${quizId}/questions`, questionData);\n  },\n  updateQuestion(questionId, questionData) {\n    return api.put(`/questions/${questionId}`, questionData);\n  },\n  deleteQuestion(questionId) {\n    return api.delete(`/questions/${questionId}`);\n  },\n  // Работа с вариантами ответов\n  getOptions(questionId) {\n    return api.get(`/questions/${questionId}/options`);\n  },\n  createOption(questionId, optionData) {\n    return api.post(`/questions/${questionId}/options`, optionData);\n  },\n  updateOption(optionId, optionData) {\n    return api.put(`/qptions/${optionId}`, optionData);\n  },\n  deleteOption(optionId) {\n    return api.delete(`/options/${optionId}`);\n  },\n  // Работа с правильными ответами\n  getCorrectAnswers(questionId) {\n    return api.get(`/questions/${questionId}/answers/correct`);\n  },\n  addCorrectAnswer(questionId, answerData) {\n    return api.post(`/questions/${questionId}/answers/correct`, answerData);\n  },\n  deleteCorrectAnswer(answerId) {\n    return api.delete(`/answers/correct/${answerId}`);\n  },\n  saveQuizToServer(quizData) {\n    const {\n      quizTitle,\n      questions\n    } = quizData;\n\n    // 1. Создаём сам квиз\n    return api.post('/quizzes', {\n      title: quizTitle,\n      course_id: 1,\n      duration: 30,\n      max_grade: 100,\n      start_date: new Date().toISOString(),\n      end_date: new Date().toISOString(),\n      state_id: 1,\n      submited_date: new Date().toISOString()\n    }).then(async res => {\n      const quizId = res.data.id;\n      console.log(\"Создан квиз с ID:\", quizId);\n\n      // 2. Добавляем каждый вопрос\n      for (const q of questions) {\n        const questionRes = await api.post(`/quizzes/${quizId}/questions`, {\n          question_text: q.question,\n          question_type_id: q.type === 'single' ? 1 : 2,\n          quiz_id: quizId\n        });\n        const questionId = questionRes.data.id;\n        console.log(\"Добавлен вопрос:\", questionRes.data);\n\n        // 3. Добавляем варианты ответов\n        const optionIds = [];\n        for (const optText of q.options) {\n          const optionRes = await api.post(`/questions/${questionId}/options`, {\n            option_text: optText,\n            question_id: questionId\n          });\n          optionIds.push(optionRes.data.id);\n        }\n\n        // 4. Помечаем правильные ответы\n        if (q.type === 'single' && q.correct_option_index != null) {\n          const correctOptionId = optionIds[q.correct_option_index];\n          await api.post(`/questions/${questionId}/answers/correct`, {\n            option_id: correctOptionId,\n            question_id: questionId\n          });\n        }\n        if (q.type === 'multiple' && Array.isArray(q.correct_option_indexes)) {\n          for (const idx of q.correct_option_indexes) {\n            const correctOptionId = optionIds[idx];\n            await api.post(`/questions/${questionId}/answers/correct`, {\n              option_id: correctOptionId,\n              question_id: questionId\n            });\n          }\n        }\n      }\n      return res; // возвращает квиз\n    });\n  },\n  loadQuizFromServer(id) {\n    return this.getQuiz(id);\n  },\n  updateQuizOnServer(id, quizData) {\n    return this.updateQuiz(id, quizData);\n  },\n  deleteQuizFromServer(id) {\n    return this.deleteQuiz(id);\n  },\n  // Метод для загрузки YAML файла\n  uploadYamlFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/Quizzes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  getUsers() {\n    return api.get('/users');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","console","status","data","window","location","href","message","Promise","reject","transformQuizData","quizData","title","quizTitle","description","quizDescription","questions","map","question","text","type","options","correct_option_index","correctOption","undefined","correct_option_indexes","correctOptions","getQuizzes","get","getQuiz","id","createQuiz","payload","course_id","duration","max_grade","start_date","Date","toISOString","end_date","state_id","submited_date","post","updateQuiz","transformedData","put","deleteQuiz","delete","getQuestions","quizId","getQuestion","questionId","createQuestion","questionData","updateQuestion","deleteQuestion","getOptions","createOption","optionData","updateOption","optionId","deleteOption","getCorrectAnswers","addCorrectAnswer","answerData","deleteCorrectAnswer","answerId","saveQuizToServer","then","res","log","q","questionRes","question_text","question_type_id","quiz_id","optionIds","optText","optionRes","option_text","question_id","push","correctOptionId","option_id","Array","isArray","idx","loadQuizFromServer","updateQuizOnServer","deleteQuizFromServer","uploadYamlFile","file","formData","FormData","append","getUsers"],"sources":["C:/Users/IP/Desktop/do_slez/sum25_swp/Antimoodlo-front/src/services/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = '/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Добавляем withCredentials если API требует куки/сессии\r\n  // withCredentials: true\r\n});\r\n\r\n// Интерцептор для авторизации\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Обработка ошибок\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      console.error('API Error:', error.response.status, error.response.data);\r\n      // Можно добавить обработку конкретных статус кодов\r\n      if (error.response.status === 401) {\r\n        // Например, перенаправление на страницу входа\r\n        window.location.href = '/login';\r\n      }\r\n    } else if (error.request) {\r\n      console.error('API Error: No response received', error.request);\r\n    } else {\r\n      console.error('API Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Функция для преобразования данных формы в формат API\r\nconst transformQuizData = (quizData) => {\r\n  return {\r\n    title: quizData.quizTitle,\r\n    description: quizData.quizDescription,\r\n    questions: quizData.questions.map(question => ({\r\n      question: question.text,\r\n      type: question.type,\r\n      options: question.options,\r\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\r\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\r\n    }))\r\n  };\r\n};\r\n\r\nexport default {\r\n  // Работа с тестами\r\n  getQuizzes() {\r\n    return api.get('/quizzes');\r\n  },\r\n  \r\n  getQuiz(id) {\r\n    return api.get(`/quizzes/${id}`);\r\n  },\r\n  \r\n  createQuiz(quizData) {\r\n  const payload = {\r\n    title: quizData.quizTitle,\r\n    course_id: 1,\r\n    duration: 30,\r\n    max_grade: 100,\r\n    start_date: new Date().toISOString(),\r\n    end_date: new Date().toISOString(),\r\n    state_id: 1,\r\n    submited_date: new Date().toISOString()\r\n  };\r\n  return api.post('/quizzes', payload);\r\n}\r\n,\r\n  \r\n  updateQuiz(id, quizData) {\r\n    const transformedData = transformQuizData(quizData);\r\n    return api.put(`/quizzes/${id}`, transformedData);\r\n  },\r\n  \r\n  deleteQuiz(id) {\r\n    return api.delete(`/quizzes/${id}`);\r\n  },\r\n\r\n  // Работа с вопросами\r\n  getQuestions(quizId) {\r\n    return api.get(`/quizzes/${quizId}/questions`);\r\n  },\r\n  \r\n  getQuestion(questionId) {\r\n    return api.get(`/questions/${questionId}`);\r\n  },\r\n  \r\n  createQuestion(quizId, questionData) {\r\n    return api.post(`/quizzes/${quizId}/questions`, questionData);\r\n  },\r\n  \r\n  updateQuestion(questionId, questionData) {\r\n    return api.put(`/questions/${questionId}`, questionData);\r\n  },\r\n  \r\n  deleteQuestion(questionId) {\r\n    return api.delete(`/questions/${questionId}`);\r\n  },\r\n\r\n  // Работа с вариантами ответов\r\n  getOptions(questionId) {\r\n    return api.get(`/questions/${questionId}/options`);\r\n  },\r\n  \r\n  createOption(questionId, optionData) {\r\n    return api.post(`/questions/${questionId}/options`, optionData);\r\n  },\r\n  \r\n  updateOption(optionId, optionData) {\r\n    return api.put(`/qptions/${optionId}`, optionData);\r\n  },\r\n  \r\n  deleteOption(optionId) {\r\n    return api.delete(`/options/${optionId}`);\r\n  },\r\n\r\n  // Работа с правильными ответами\r\n  getCorrectAnswers(questionId) {\r\n    return api.get(`/questions/${questionId}/answers/correct`);\r\n  },\r\n  \r\n  addCorrectAnswer(questionId, answerData) {\r\n    return api.post(`/questions/${questionId}/answers/correct`, answerData);\r\n  },\r\n  \r\n  deleteCorrectAnswer(answerId) {\r\n    return api.delete(`/answers/correct/${answerId}`);\r\n  },\r\n\r\n  saveQuizToServer(quizData) {\r\n  const { quizTitle, questions } = quizData;\r\n\r\n  // 1. Создаём сам квиз\r\n  return api.post('/quizzes', {\r\n    title: quizTitle,\r\n    course_id: 1,\r\n    duration: 30,\r\n    max_grade: 100,\r\n    start_date: new Date().toISOString(),\r\n    end_date: new Date().toISOString(),\r\n    state_id: 1,\r\n    submited_date: new Date().toISOString()\r\n  }).then(async (res) => {\r\n    const quizId = res.data.id;\r\n    console.log(\"Создан квиз с ID:\", quizId);\r\n\r\n    // 2. Добавляем каждый вопрос\r\n    for (const q of questions) {\r\n      const questionRes = await api.post(`/quizzes/${quizId}/questions`, {\r\n        question_text: q.question,\r\n        question_type_id: q.type === 'single' ? 1 : 2,\r\n        quiz_id: quizId\r\n      });\r\n      const questionId = questionRes.data.id;\r\n      console.log(\"Добавлен вопрос:\", questionRes.data);\r\n\r\n      // 3. Добавляем варианты ответов\r\n      const optionIds = [];\r\n\r\n      for (const optText of q.options) {\r\n        const optionRes = await api.post(`/questions/${questionId}/options`, {\r\n          option_text: optText,\r\n          question_id: questionId\r\n        });\r\n        optionIds.push(optionRes.data.id);\r\n      }\r\n\r\n      // 4. Помечаем правильные ответы\r\n      if (q.type === 'single' && q.correct_option_index != null) {\r\n        const correctOptionId = optionIds[q.correct_option_index];\r\n        await api.post(`/questions/${questionId}/answers/correct`, {\r\n          option_id: correctOptionId,\r\n          question_id: questionId\r\n        });\r\n      }\r\n\r\n      if (q.type === 'multiple' && Array.isArray(q.correct_option_indexes)) {\r\n        for (const idx of q.correct_option_indexes) {\r\n          const correctOptionId = optionIds[idx];\r\n          await api.post(`/questions/${questionId}/answers/correct`, {\r\n            option_id: correctOptionId,\r\n            question_id: questionId\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return res; // возвращает квиз\r\n  });\r\n},\r\n\r\n\r\n  \r\n  loadQuizFromServer(id) {\r\n    return this.getQuiz(id);\r\n  },\r\n  \r\n  updateQuizOnServer(id, quizData) {\r\n    return this.updateQuiz(id, quizData);\r\n  },\r\n  \r\n  deleteQuizFromServer(id) {\r\n    return this.deleteQuiz(id);\r\n  },\r\n  \r\n  // Метод для загрузки YAML файла\r\n  uploadYamlFile(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    return api.post('/Quizzes/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  },\r\n\r\n  getUsers() {\r\n  return api.get('/users');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}