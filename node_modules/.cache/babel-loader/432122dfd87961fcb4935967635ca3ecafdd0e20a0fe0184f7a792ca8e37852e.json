{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // Добавляем withCredentials если API требует куки/сессии\n  // withCredentials: true\n});\n\n// Интерцептор для авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    console.error('API Error:', error.response.status, error.response.data);\n    // Можно добавить обработку конкретных статус кодов\n    if (error.response.status === 401) {\n      // Например, перенаправление на страницу входа\n      window.location.href = '/login';\n    }\n  } else if (error.request) {\n    console.error('API Error: No response received', error.request);\n  } else {\n    console.error('API Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Функция для преобразования данных формы в формат API\nconst transformQuizData = quizData => {\n  return {\n    title: quizData.quizTitle,\n    description: quizData.quizDescription,\n    questions: quizData.questions.map(question => ({\n      question: question.text,\n      type: question.type,\n      options: question.options,\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\n    }))\n  };\n};\nexport default {\n  // Работа с тестами\n  getQuizzes() {\n    return api.get('/quizzes');\n  },\n  getQuiz(id) {\n    return api.get(`/quizzes/${id}`);\n  },\n  createQuiz(quizData) {\n    const payload = {\n      title: quizData.quizTitle,\n      course_id: 1,\n      duration: 30,\n      max_grade: 100,\n      start_date: new Date().toISOString(),\n      end_date: new Date().toISOString(),\n      state_id: 1,\n      submited_date: new Date().toISOString()\n    };\n    return api.post('/quizzes', payload);\n  },\n  updateQuiz(id, quizData) {\n    const transformedData = transformQuizData(quizData);\n    return api.put(`/quizzes/${id}`, transformedData);\n  },\n  deleteQuiz(id) {\n    return api.delete(`/quizzes/${id}`);\n  },\n  // Работа с вопросами\n  getQuestions(quizId) {\n    return api.get(`/quizzes/${quizId}/questions`);\n  },\n  getQuestion(questionId) {\n    return api.get(`/questions/${questionId}`);\n  },\n  createQuestion(quizId, questionData) {\n    return api.post(`/quizzes/${quizId}/questions`, questionData);\n  },\n  updateQuestion(questionId, questionData) {\n    return api.put(`/questions/${questionId}`, questionData);\n  },\n  deleteQuestion(questionId) {\n    return api.delete(`/questions/${questionId}`);\n  },\n  // Работа с вариантами ответов\n  getOptions(questionId) {\n    return api.get(`/questions/${questionId}/options`);\n  },\n  createOption(questionId, optionData) {\n    return api.post(`/questions/${questionId}/options`, optionData);\n  },\n  updateOption(optionId, optionData) {\n    return api.put(`/qptions/${optionId}`, optionData);\n  },\n  deleteOption(optionId) {\n    return api.delete(`/options/${optionId}`);\n  },\n  // Работа с правильными ответами\n  getCorrectAnswers(questionId) {\n    return api.get(`/questions/${questionId}/answers/correct`);\n  },\n  addCorrectAnswer(questionId, answerData) {\n    return api.post(`/questions/${questionId}/answers/correct`, answerData);\n  },\n  deleteCorrectAnswer(answerId) {\n    return api.delete(`/answers/correct/${answerId}`);\n  },\n  async saveQuizToServer(quizData) {\n    const {\n      quizTitle,\n      questions\n    } = quizData;\n    console.log(\"Сохраняем квиз:\", quizTitle);\n    // 1) Создаём сам квиз\n    const quizRes = await api.post('/quizzes', {\n      title: quizTitle,\n      courseid: 1,\n      duration: 30,\n      maxgrade: 100,\n      startdate: new Date().toISOString(),\n      enddate: new Date().toISOString(),\n      stateid: 1,\n      submiteddate: new Date().toISOString()\n    });\n    const quizId = quizRes.data.id;\n    console.log('Создан квиз с ID:', quizId);\n\n    // 2) Добавляем вопросы\n    for (const q of questions) {\n      const questionRes = await api.post(`/quizzes/${quizId}/questions`, {\n        questiontext: q.question,\n        question_typeid: q.type === 'single' ? 1 : 2,\n        quizid: quizId\n      });\n      const questionId = questionRes.data.id;\n      console.log('Добавлен вопрос:', questionRes.data);\n\n      // 3) Добавляем варианты ответов\n      const optionIds = [];\n      for (const optText of q.options) {\n        const optRes = await api.post(`/questions/${questionId}/options`, {\n          option_text: optText,\n          question_id: questionId\n        });\n        optionIds.push(optRes.data.id);\n      }\n\n      // 4) Помечаем правильные ответы\n      if (q.type === 'single' && q.correct_option_index != null) {\n        await api.post(`/questions/${questionId}/answers/correct`, {\n          option_id: optionIds[q.correct_option_index],\n          question_id: questionId\n        });\n      }\n      if (q.type === 'multiple' && Array.isArray(q.correct_option_indexes)) {\n        for (const idx of q.correct_option_indexes) {\n          await api.post(`/questions/${questionId}/answers/correct`, {\n            option_id: optionIds[idx],\n            question_id: questionId\n          });\n        }\n      }\n    }\n    console.log(\"Квиз сохранён на сервере:\", quizId);\n    return quizRes;\n  },\n  loadQuizFromServer(id) {\n    return this.getQuiz(id);\n  },\n  updateQuizOnServer(id, quizData) {\n    return this.updateQuiz(id, quizData);\n  },\n  deleteQuizFromServer(id) {\n    return this.deleteQuiz(id);\n  },\n  // Метод для загрузки YAML файла\n  uploadYamlFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/quizzes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  getUsers() {\n    return api.get('/users');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","console","status","data","window","location","href","message","Promise","reject","transformQuizData","quizData","title","quizTitle","description","quizDescription","questions","map","question","text","type","options","correct_option_index","correctOption","undefined","correct_option_indexes","correctOptions","getQuizzes","get","getQuiz","id","createQuiz","payload","course_id","duration","max_grade","start_date","Date","toISOString","end_date","state_id","submited_date","post","updateQuiz","transformedData","put","deleteQuiz","delete","getQuestions","quizId","getQuestion","questionId","createQuestion","questionData","updateQuestion","deleteQuestion","getOptions","createOption","optionData","updateOption","optionId","deleteOption","getCorrectAnswers","addCorrectAnswer","answerData","deleteCorrectAnswer","answerId","saveQuizToServer","log","quizRes","courseid","maxgrade","startdate","enddate","stateid","submiteddate","q","questionRes","questiontext","question_typeid","quizid","optionIds","optText","optRes","option_text","question_id","push","option_id","Array","isArray","idx","loadQuizFromServer","updateQuizOnServer","deleteQuizFromServer","uploadYamlFile","file","formData","FormData","append","getUsers"],"sources":["C:/Users/IP/Desktop/do_slez/sum25_swp/Antimoodlo-front/src/services/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = '/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Добавляем withCredentials если API требует куки/сессии\r\n  // withCredentials: true\r\n});\r\n\r\n// Интерцептор для авторизации\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Обработка ошибок\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      console.error('API Error:', error.response.status, error.response.data);\r\n      // Можно добавить обработку конкретных статус кодов\r\n      if (error.response.status === 401) {\r\n        // Например, перенаправление на страницу входа\r\n        window.location.href = '/login';\r\n      }\r\n    } else if (error.request) {\r\n      console.error('API Error: No response received', error.request);\r\n    } else {\r\n      console.error('API Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Функция для преобразования данных формы в формат API\r\nconst transformQuizData = (quizData) => {\r\n  return {\r\n    title: quizData.quizTitle,\r\n    description: quizData.quizDescription,\r\n    questions: quizData.questions.map(question => ({\r\n      question: question.text,\r\n      type: question.type,\r\n      options: question.options,\r\n      correct_option_index: question.type === 'single' ? question.correctOption : undefined,\r\n      correct_option_indexes: question.type === 'multiple' ? question.correctOptions : undefined\r\n    }))\r\n  };\r\n};\r\n\r\nexport default {\r\n  // Работа с тестами\r\n  getQuizzes() {\r\n    return api.get('/quizzes');\r\n  },\r\n  \r\n  getQuiz(id) {\r\n    return api.get(`/quizzes/${id}`);\r\n  },\r\n  \r\n  createQuiz(quizData) {\r\n  const payload = {\r\n    title: quizData.quizTitle,\r\n    course_id: 1,\r\n    duration: 30,\r\n    max_grade: 100,\r\n    start_date: new Date().toISOString(),\r\n    end_date: new Date().toISOString(),\r\n    state_id: 1,\r\n    submited_date: new Date().toISOString()\r\n  };\r\n  return api.post('/quizzes', payload);\r\n}\r\n,\r\n  \r\n  updateQuiz(id, quizData) {\r\n    const transformedData = transformQuizData(quizData);\r\n    return api.put(`/quizzes/${id}`, transformedData);\r\n  },\r\n  \r\n  deleteQuiz(id) {\r\n    return api.delete(`/quizzes/${id}`);\r\n  },\r\n\r\n  // Работа с вопросами\r\n  getQuestions(quizId) {\r\n    return api.get(`/quizzes/${quizId}/questions`);\r\n  },\r\n  \r\n  getQuestion(questionId) {\r\n    return api.get(`/questions/${questionId}`);\r\n  },\r\n  \r\n  createQuestion(quizId, questionData) {\r\n    return api.post(`/quizzes/${quizId}/questions`, questionData);\r\n  },\r\n  \r\n  updateQuestion(questionId, questionData) {\r\n    return api.put(`/questions/${questionId}`, questionData);\r\n  },\r\n  \r\n  deleteQuestion(questionId) {\r\n    return api.delete(`/questions/${questionId}`);\r\n  },\r\n\r\n  // Работа с вариантами ответов\r\n  getOptions(questionId) {\r\n    return api.get(`/questions/${questionId}/options`);\r\n  },\r\n  \r\n  createOption(questionId, optionData) {\r\n    return api.post(`/questions/${questionId}/options`, optionData);\r\n  },\r\n  \r\n  updateOption(optionId, optionData) {\r\n    return api.put(`/qptions/${optionId}`, optionData);\r\n  },\r\n  \r\n  deleteOption(optionId) {\r\n    return api.delete(`/options/${optionId}`);\r\n  },\r\n\r\n  // Работа с правильными ответами\r\n  getCorrectAnswers(questionId) {\r\n    return api.get(`/questions/${questionId}/answers/correct`);\r\n  },\r\n  \r\n  addCorrectAnswer(questionId, answerData) {\r\n    return api.post(`/questions/${questionId}/answers/correct`, answerData);\r\n  },\r\n  \r\n  deleteCorrectAnswer(answerId) {\r\n    return api.delete(`/answers/correct/${answerId}`);\r\n  },\r\n\r\n  async saveQuizToServer(quizData) {\r\n    const { quizTitle, questions } = quizData;\r\n    console.log(\"Сохраняем квиз:\", quizTitle);\r\n    // 1) Создаём сам квиз\r\n    const quizRes = await api.post('/quizzes', {\r\n      title: quizTitle,\r\n      courseid: 1,\r\n      duration: 30,\r\n      maxgrade: 100,\r\n      startdate: new Date().toISOString(),\r\n      enddate: new Date().toISOString(),\r\n      stateid: 1,\r\n      submiteddate: new Date().toISOString()\r\n    });\r\n\r\n    const quizId = quizRes.data.id;\r\n    console.log('Создан квиз с ID:', quizId);\r\n\r\n    // 2) Добавляем вопросы\r\n    for (const q of questions) {\r\n      const questionRes = await api.post(`/quizzes/${quizId}/questions`, {\r\n      questiontext: q.question,\r\n      question_typeid: q.type === 'single' ? 1 : 2,\r\n      quizid: quizId\r\n      });\r\n      const questionId = questionRes.data.id;\r\n      console.log('Добавлен вопрос:', questionRes.data);\r\n\r\n      // 3) Добавляем варианты ответов\r\n      const optionIds = [];\r\n      for (const optText of q.options) {\r\n        const optRes = await api.post(\r\n          `/questions/${questionId}/options`,\r\n          {\r\n            option_text: optText,\r\n            question_id: questionId\r\n          }\r\n        );\r\n        optionIds.push(optRes.data.id);\r\n      }\r\n\r\n      // 4) Помечаем правильные ответы\r\n      if (q.type === 'single' && q.correct_option_index != null) {\r\n        await api.post(\r\n          `/questions/${questionId}/answers/correct`,\r\n          {\r\n            option_id:   optionIds[q.correct_option_index],\r\n            question_id: questionId\r\n          }\r\n        );\r\n      }\r\n      if (q.type === 'multiple' && Array.isArray(q.correct_option_indexes)) {\r\n        for (const idx of q.correct_option_indexes) {\r\n          await api.post(\r\n            `/questions/${questionId}/answers/correct`,\r\n            {\r\n              option_id:   optionIds[idx],\r\n              question_id: questionId\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"Квиз сохранён на сервере:\", quizId);\r\n    return quizRes;\r\n  },\r\n\r\n\r\n  \r\n  loadQuizFromServer(id) {\r\n    return this.getQuiz(id);\r\n  },\r\n  \r\n  updateQuizOnServer(id, quizData) {\r\n    return this.updateQuiz(id, quizData);\r\n  },\r\n  \r\n  deleteQuizFromServer(id) {\r\n    return this.deleteQuiz(id);\r\n  },\r\n  \r\n  // Метод для загрузки YAML файла\r\n  uploadYamlFile(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    return api.post('/quizzes/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  },\r\n\r\n  getUsers() {\r\n  return api.get('/users');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}